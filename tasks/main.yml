---
- name: Update OS package caches for Debian
  apt:
    update_cache: yes
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - nginx
    - nginx-update-os-package
    - nginx-update-os-package-cache
    - webserver

- name: Update OS package caches for CentOS
  dnf:
    update_cache: yes
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - nginx
    - nginx-update-os-package
    - nginx-update-os-package-cache
    - webserver

- name: Update OS packages
  package:
    name: '*'
    state: latest
  tags:
    - nginx
    - nginx-update-os-package
    - webserver

# For Ubuntu
# Note: Use libssl package.
- name: Install OS packages for Debain
  package:
    name: "{{ nginx_debian_install }}"
    state: latest
  when: ansible_facts['os_family'] == 'Debian'
  tags:
    - nginx
    - nginx-install-os-package
    - webserver

# For CentOS
# Note: Don't use openssl pacakge, build from source code.
- name: Install OS packages for CentOS
  package:
    name: "{{ nginx_redhat_install }}"
    state: latest
  when: ansible_facts['os_family'] == 'RedHat'
  tags:
    - nginx
    - nginx-install-os-package
    - webserver

- name: Delete OS packages of nginx
  package:
    name:
      - nginx
    state: absent
  tags:
    - nginx
    - nginx-delete-os-package-of-nginx
    - webserver

- name: Create a local src directory
  file:
    path: "/usr/local/src"
    state: directory
    mode: 0755
  tags:
    - nginx
    - nginx-create-local-src-directory
    - webserver

# Download, build and install openssl
- name: Download openssl from github
  get_url:
    url: "{{ openssl_mirror }}/openssl-{{ openssl_version }}.tar.gz"
    dest: "/usr/local/src/openssl-{{ openssl_version }}.tar.gz"
    owner: root
    group: root
    mode: 0644
  when: ansible_facts['os_family'] == 'RedHat' or ansible_facts['os_family'] == 'FreeBSD'
  tags:
    - nginx
    - nginx-download-openssl
    - webserver

- name: Check openssl source file exists
  stat:
    path: "/usr/local/src/openssl-{{ openssl_version }}.tar.gz"
  register: openssl_path
  when: ansible_facts['os_family'] == 'RedHat' or ansible_facts['os_family'] == 'FreeBSD'
  tags:
    - nginx
    - nginx-check-openssl-source-exists
    - webserver

- name: Unarchive openssl tar file
  unarchive:
    remote_src: yes
    src: "/usr/local/src/openssl-{{ openssl_version }}.tar.gz"
    dest: "/usr/local/src/"
  when:
    - openssl_path is defined and 'stat' in openssl_path and openssl_path.stat.exists
    - not ansible_check_mode
  tags:
    - nginx
    - nginx-unarchive-openssl-files
    - webserver

- name: Check openssl source directory exists
  stat:
    path: "/usr/local/src/openssl-{{ openssl_version }}"
  register: openssl_dir
  when: ansible_facts['os_family'] == 'RedHat' or ansible_facts['os_family'] == 'FreeBSD'
  tags:
    - nginx
    - nginx-check-openssl-source-directory-exists
    - webserver

- name: Install openssl
  shell:
    chdir: "/usr/local/src/openssl-{{ openssl_version }}"
    cmd: './config && make && make install'
  when:
    - openssl_dir is defined and 'stat' in openssl_dir and openssl_dir.stat.exists
    - not ansible_check_mode
  tags:
    - nginx
    - nginx-install-openssl
    - webserver

# Download, build and install luajit2
# ---
# LuaJIT ought to run all Lua 5.1-compatible source code just fine.
# Reference: https://luajit.org/status.html
- name: Download luajit2 from github
  git:
    repo: https://github.com/openresty/luajit2.git
    dest: /usr/local/src/luajit2
    version: "{{ luajit_version }}"
  tags:
    - nginx
    - nginx-download-luajit2
    - webserver

- name: Install luajit2
  shell:
    chdir: /usr/local/src/luajit2
    cmd: 'make && make install'
  when: not ansible_check_mode
  changed_when: false
  tags:
    - nginx
    - nginx-install-luajit2
    - webserver

# Download and install lua-resty-core
- name: Download lua resty core from github
  git:
    repo: https://github.com/openresty/lua-resty-core.git
    dest: /usr/local/src/lua-resty-core
    version: "{{ lua_resty_core_version }}"
  tags:
    - nginx
    - nginx-download-lua-resty-core
    - webserver

- name: Install lua resty core
  command:
    chdir: /usr/local/src/lua-resty-core
    cmd: make install
  when: not ansible_check_mode
  changed_when: false
  tags:
    - nginx
    - nginx-install-lua-resty-core
    - webserver

# Download and install lua-resty-lrucache
- name: Download lua resty lrucache
  git:
    repo: https://github.com/openresty/lua-resty-lrucache.git
    dest: /usr/local/src/lua-resty-lrucache
    version: "{{ lua_resty_lrucache_version }}"
  tags:
    - nginx
    - nginx-download-lua-resty-luacache
    - webserver

- name: Install lua resty lrucache
  command:
    chdir: /usr/local/src/lua-resty-lrucache
    cmd: make install
  when: not ansible_check_mode
  changed_when: false
  tags:
    - nginx
    - nginx-install-lua-resty-luacache
    - webserver

# Download nginx modules
- name: Download ngx_devel_kit from github
  git:
    repo: https://github.com/vision5/ngx_devel_kit.git
    dest: /usr/local/src/ngx_devel_kit
    version: "{{ ngx_devel_kit_version }}"
  tags:
    - nginx
    - nginx-download-ngx-devel-kit
    - webserver

- name: Download lua-nginx-module from github
  git:
    repo: https://github.com/openresty/lua-nginx-module.git
    dest: /usr/local/src/lua-nginx-module
    version: "{{ lua_nginx_module_version }}"
  tags:
    - nginx
    - nginx-install-ngx-devel-kit
    - webserver

- name: Download naxsi from github
  git:
    repo: https://github.com/nbs-system/naxsi.git
    dest: /usr/local/src/naxsi
    version: "{{ naxsi_version }}"
  tags:
    - nginx
    - nginx-download-naxsi
    - webserver

- name: Download ngx_http_geoip2_module from github
  git:
    repo: https://github.com/leev/ngx_http_geoip2_module.git
    dest: /usr/local/src/ngx_http_geoip2_module
    version: "{{ ngx_http_geoip2_module_version }}"
  tags:
    - nginx
    - nginx-install-naxsi
    - webserver

# Download, build and install nginx
- name: Create nginx group
  group:
    name: "{{ nginx_group }}"
    state: present
  tags:
    - nginx
    - nginx-create-nginx-group
    - webserver

- name: Create nginx user
  user:
    name: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    shell: /sbin/nologin
    create_home: no
    home: /home/nginx
  tags:
    - nginx
    - nginx-create-nginx-user
    - webserver

- name: Create temp directory for nginx
  file:
    path: /var/tmp/nginx
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: 0755
  tags:
    - nginx
    - nginx-create-temp-directory
    - webserver

# Reference: http://nginx.org/en/download.html
- name: Download nginx tar file
  get_url:
    url: "{{ nginx_mirror }}/nginx-{{ nginx_version }}.tar.gz"
    dest: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    owner: root
    group: root
    mode: 0644
  tags:
    - nginx
    - nginx-download-nginx-tar-file
    - webserver

- name: Unarchive nginx tar file
  unarchive:
    remote_src: yes
    src: "/usr/local/src/nginx-{{ nginx_version }}.tar.gz"
    dest: /usr/local/src/
  when: not ansible_check_mode
  tags:
    - nginx
    - nginx-unarchive-nginx-tar-file
    - webserver

# Reference: http://nginx.org/en/docs/configure.html
# Note: On FreeBSD, http-*-temp-path and --with-ld-opt parameters are different from others.
- name: Upload config.sh file
  template:
    src: config.sh.j2
    dest: "/usr/local/src/nginx-{{ nginx_version }}/config.sh"
    owner: root
    group: root
    mode: 0755
  tags:
    - nginx
    - nginx-upload-config-sh-files
    - webserver

- name: Run config.sh
  shell:
    chdir: "/usr/local/src/nginx-{{ nginx_version }}"
    cmd: 'bash config.sh && make && make install'
  when: not ansible_check_mode
  changed_when: false
  tags:
    - nginx
    - nginx-run-config-sh
    - webserver

# After installed nginx, Add a following phrase to http directive of nginx.conf.
# lua_package_path "/usr/local/lib/lua/?.lua;;";
# Reference: https://github.com/openresty/lua-nginx-module/issues/1633

- name: Copy naxsi_core.rules
  copy:
    remote_src: yes
    src: /usr/local/src/naxsi/naxsi_config/naxsi_core.rules
    dest: /usr/local/etc/nginx/naxsi_core.rules
    owner: root
    group: root
    mode: 0644
  when: not ansible_check_mode
  tags:
    - nginxconf
    - nginx
    - webserver

- name: Copy nginx basic conf file
  copy:
    src: "{{ nginx_conf_src_path.rstrip('/') }}/{{ item }}"
    dest: "{{ nginx_conf_dest_path.rstrip('/') }}/{{ item }}"
    owner: root
    group: root
    mode: 0644
    backup: yes
  with_items:
    - nginx.conf
    - mime.types
  when:
    - nginx_conf_src_path | length > 0
  tags:
    - nginxconf
    - nginx
    - webserver

- name: Copy nginx conf files
  copy:
    src: "{{ nginx_conf_src_path.rstrip('/') }}/{{ item }}"
    dest: "{{ nginx_conf_dest_path.rstrip('/') }}/"
    owner: root
    group: root
    mode: 0644
    backup: yes
  with_items:
    - conf.d
    - html
  when:
    - nginx_conf_src_path | length > 0
  tags:
    - nginxconf
    - nginx
    - webserver

# Note: FreeBSD's service is NOT implemented yet...
- name: Copy nginx service setting file
  copy:
    src: "{{ ansible_facts['os_family'] }}/nginx.service"
    dest: /etc/systemd/system/nginx.service
    owner: root
    group: root
    mode: 0644
  when: ansible_facts['os_family'] == 'Debian' or ansible_facts['os_family'] == 'RedHat'
  tags:
    - nginxconf
    - nginx
    - webserver

- name: Check nginx service exists
  stat:
    path: /etc/systemd/system/nginx.service
  register: nginx_service
  tags:
    - nginxconf
    - nginx
    - webserver

- name: Enable nginx service
  systemd:
    name: nginx
    enabled: yes
  when:
    - ansible_facts['os_family'] == 'Debian' or ansible_facts['os_family'] == 'RedHat'
    - nginx_service.stat.exists
  tags:
    - nginxconf
    - nginx
    - webserver

# Note: FreeBSD's logrotate is NOT implemented yet...
- name: Copy nginx logrotate setting file
  copy:
    src: "{{ ansible_facts['os_family'] }}/nginx.logrotate"
    dest: /etc/logrotate.d/nginx
    owner: root
    group: root
    mode: 0644
  when: ansible_facts['os_family'] == 'Debian' or ansible_facts['os_family'] == 'RedHat'
  tags:
    - nginxconf
    - nginx
    - webserver
